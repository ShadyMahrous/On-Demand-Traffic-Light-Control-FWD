
On-Demand-Traffic-light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000c94  00000d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000d2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001717  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b5  00000000  00000000  00002627  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c37  00000000  00000000  00002fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  00003c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062f  00000000  00000000  00003ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000908  00000000  00000000  00004503  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004e0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d5 01 	call	0x3aa	; 0x3aa <main>
  8a:	0c 94 48 06 	jmp	0xc90	; 0xc90 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:
#include "App.h"
EN_carColor_t CarLedColor = GREEN;
void App_init(void)
{
	/********** LEDS INIT ************/
	LED_Init(LED_CAR_PORT,LED_CAR_GREEN_PIN);
  92:	62 e0       	ldi	r22, 0x02	; 2
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 bd 01 	call	0x37a	; 0x37a <LED_Init>
	LED_Init(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 bd 01 	call	0x37a	; 0x37a <LED_Init>
	LED_Init(LED_CAR_PORT,LED_CAR_RED_PIN);
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 bd 01 	call	0x37a	; 0x37a <LED_Init>
	
	LED_Init(LED_PED_PORT,LED_PED_GREEN_PIN);
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 bd 01 	call	0x37a	; 0x37a <LED_Init>
	LED_Init(LED_PED_PORT,LED_PED_YELLOW_PIN);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	0e 94 bd 01 	call	0x37a	; 0x37a <LED_Init>
	LED_Init(LED_PED_PORT,LED_PED_RED_PIN);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	0e 94 bd 01 	call	0x37a	; 0x37a <LED_Init>
	
	LED_Init(PORT_C,PIN0);
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	83 e4       	ldi	r24, 0x43	; 67
  c6:	0e 94 bd 01 	call	0x37a	; 0x37a <LED_Init>
	/********* PUSH_BUTTON INIT *******/
	BUTTON_init(BUTTON_PORT,BUTTON_PIN);
  ca:	62 e0       	ldi	r22, 0x02	; 2
  cc:	84 e4       	ldi	r24, 0x44	; 68
  ce:	0e 94 c9 01 	call	0x392	; 0x392 <BUTTON_init>
	
	/*********** TIMER INIT ***********/
	TIMER_init();
  d2:	0e 94 a2 03 	call	0x744	; 0x744 <TIMER_init>
	
	
	/*********** EXT_INT INIT ***********/
	EXT_INT_TriggerEdge(EX_INT0,RISING_EDGE);
  d6:	62 e0       	ldi	r22, 0x02	; 2
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 15 03 	call	0x62a	; 0x62a <EXT_INT_TriggerEdge>
	EXT_INT_ENABLE(EX_INT0);
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 03 03 	call	0x606	; 0x606 <EXT_INT_ENABLE>
	EXT_INT_EnableGlobal();
  e4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <EXT_INT_EnableGlobal>
	
	EXT_INT_SetCallBack(EX_INT0,EXT_INT0_Exe);
  e8:	61 eb       	ldi	r22, 0xB1	; 177
  ea:	71 e0       	ldi	r23, 0x01	; 1
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 74 03 	call	0x6e8	; 0x6e8 <EXT_INT_SetCallBack>
  f2:	08 95       	ret

000000f4 <blinkYellow>:
}

void blinkYellow(void)
{
  f4:	cf 93       	push	r28
	
	for (uint8_t i = 0; i < 5;i++)
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	1d c0       	rjmp	.+58     	; 0x134 <blinkYellow+0x40>
	{
		LED_On(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	81 e4       	ldi	r24, 0x41	; 65
  fe:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
		LED_On(LED_PED_PORT,LED_PED_YELLOW_PIN);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	82 e4       	ldi	r24, 0x42	; 66
 106:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
		TIMER_delay(1000);
 10a:	68 ee       	ldi	r22, 0xE8	; 232
 10c:	73 e0       	ldi	r23, 0x03	; 3
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 a9 03 	call	0x752	; 0x752 <TIMER_delay>
		LED_Off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	81 e4       	ldi	r24, 0x41	; 65
 11a:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
		LED_Off(LED_PED_PORT,LED_PED_YELLOW_PIN);
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	82 e4       	ldi	r24, 0x42	; 66
 122:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
		TIMER_delay(1000);
 126:	68 ee       	ldi	r22, 0xE8	; 232
 128:	73 e0       	ldi	r23, 0x03	; 3
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 a9 03 	call	0x752	; 0x752 <TIMER_delay>
}

void blinkYellow(void)
{
	
	for (uint8_t i = 0; i < 5;i++)
 132:	cf 5f       	subi	r28, 0xFF	; 255
 134:	c5 30       	cpi	r28, 0x05	; 5
 136:	08 f3       	brcs	.-62     	; 0xfa <blinkYellow+0x6>
		LED_Off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
		LED_Off(LED_PED_PORT,LED_PED_YELLOW_PIN);
		TIMER_delay(1000);
	}

}
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <NormalMode>:


void NormalMode(void)
{	
 13c:	cf 93       	push	r28
	 
	//turn all LEDs off to clear whatever was done in pedestrian mode (if coming from there)
	LED_Off(LED_CAR_PORT,LED_CAR_GREEN_PIN);
 13e:	62 e0       	ldi	r22, 0x02	; 2
 140:	81 e4       	ldi	r24, 0x41	; 65
 142:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
	LED_Off(LED_CAR_PORT,LED_CAR_RED_PIN);
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	81 e4       	ldi	r24, 0x41	; 65
 14a:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
	LED_Off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	81 e4       	ldi	r24, 0x41	; 65
 152:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
	
	LED_Off(LED_PED_PORT,LED_PED_GREEN_PIN);
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	82 e4       	ldi	r24, 0x42	; 66
 15a:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
	LED_Off(LED_PED_PORT,LED_PED_YELLOW_PIN);
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	82 e4       	ldi	r24, 0x42	; 66
 162:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
	LED_Off(LED_PED_PORT,LED_PED_RED_PIN);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	82 e4       	ldi	r24, 0x42	; 66
 16a:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
	
	
	/*******  1.car green on & pedestrian red on for 5 seconds *********/ 
	LED_On(LED_CAR_PORT,LED_CAR_GREEN_PIN);
 16e:	62 e0       	ldi	r22, 0x02	; 2
 170:	81 e4       	ldi	r24, 0x41	; 65
 172:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
	LED_On(LED_PED_PORT,LED_PED_RED_PIN);
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	82 e4       	ldi	r24, 0x42	; 66
 17a:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
	CarLedColor = GREEN;
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	TIMER_delay(5000); //delay 5 seconds
 184:	68 e8       	ldi	r22, 0x88	; 136
 186:	73 e1       	ldi	r23, 0x13	; 19
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 a9 03 	call	0x752	; 0x752 <TIMER_delay>
	
	
	//car yellow light to blink for 5 seconds	
	CarLedColor = YELLOW;
 190:	c1 e0       	ldi	r28, 0x01	; 1
 192:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
	blinkYellow();
 196:	0e 94 7a 00 	call	0xf4	; 0xf4 <blinkYellow>
	LED_Off(LED_PED_PORT,LED_PED_RED_PIN);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	82 e4       	ldi	r24, 0x42	; 66
 19e:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
	LED_Off(LED_CAR_PORT,LED_CAR_GREEN_PIN); //turn green led off 
 1a2:	62 e0       	ldi	r22, 0x02	; 2
 1a4:	81 e4       	ldi	r24, 0x41	; 65
 1a6:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
	LED_Off(LED_CAR_PORT,LED_PED_RED_PIN); //turning off the pedestrian red 
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	81 e4       	ldi	r24, 0x41	; 65
 1ae:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
	
	/*******  2.car RED on & pedestrian GREEN on for 5 seconds *********/ 
	CarLedColor = RED;
 1b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	LED_On(LED_CAR_PORT,LED_CAR_RED_PIN);
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	81 e4       	ldi	r24, 0x41	; 65
 1ba:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
	LED_On(LED_PED_PORT,LED_PED_GREEN_PIN);
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	82 e4       	ldi	r24, 0x42	; 66
 1c2:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
	
	TIMER_delay(5000);
 1c6:	68 e8       	ldi	r22, 0x88	; 136
 1c8:	73 e1       	ldi	r23, 0x13	; 19
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 a9 03 	call	0x752	; 0x752 <TIMER_delay>
	//start blinking car yellow light
	CarLedColor = YELLOW;
 1d2:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
	blinkYellow();
 1d6:	0e 94 7a 00 	call	0xf4	; 0xf4 <blinkYellow>
	LED_Off(LED_CAR_PORT,LED_CAR_RED_PIN); //turn car red off
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	81 e4       	ldi	r24, 0x41	; 65
 1de:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
	LED_On(LED_PED_PORT,LED_PED_RED_PIN); //turn ped red on
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	82 e4       	ldi	r24, 0x42	; 66
 1e6:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
	LED_Off(LED_PED_PORT,LED_PED_GREEN_PIN); //turn ped green off
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	82 e4       	ldi	r24, 0x42	; 66
 1ee:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>

}
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <pedestrianMode>:


void pedestrianMode()
{
 1f6:	cf 93       	push	r28
	switch(CarLedColor)
 1f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	09 f4       	brne	.+2      	; 0x202 <pedestrianMode+0xc>
 200:	4d c0       	rjmp	.+154    	; 0x29c <pedestrianMode+0xa6>
 202:	20 f0       	brcs	.+8      	; 0x20c <pedestrianMode+0x16>
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	09 f4       	brne	.+2      	; 0x20a <pedestrianMode+0x14>
 208:	7a c0       	rjmp	.+244    	; 0x2fe <pedestrianMode+0x108>
 20a:	a9 c0       	rjmp	.+338    	; 0x35e <pedestrianMode+0x168>
	{		
		
		
		case RED :
			//car red on and ped green on for 5 seconds
			LED_On(LED_CAR_PORT,LED_CAR_RED_PIN);
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	81 e4       	ldi	r24, 0x41	; 65
 210:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
			LED_On(LED_PED_PORT,LED_CAR_GREEN_PIN);		
 214:	62 e0       	ldi	r22, 0x02	; 2
 216:	82 e4       	ldi	r24, 0x42	; 66
 218:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
			TIMER_delay(5000);	
 21c:	68 e8       	ldi	r22, 0x88	; 136
 21e:	73 e1       	ldi	r23, 0x13	; 19
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 a9 03 	call	0x752	; 0x752 <TIMER_delay>
				continue as if in normal mode to complete the cycle since the ISR returns to the
				place it came from.
			*/
			
			
			LED_Off(LED_CAR_PORT,LED_CAR_RED_PIN);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	81 e4       	ldi	r24, 0x41	; 65
 22c:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
			//while green still on for pedestrians
			for (uint8_t i = 0; i < 5;i++)
 230:	c0 e0       	ldi	r28, 0x00	; 0
 232:	15 c0       	rjmp	.+42     	; 0x25e <pedestrianMode+0x68>
			{
				LED_On(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	81 e4       	ldi	r24, 0x41	; 65
 238:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
				TIMER_delay(500);
 23c:	64 ef       	ldi	r22, 0xF4	; 244
 23e:	71 e0       	ldi	r23, 0x01	; 1
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 a9 03 	call	0x752	; 0x752 <TIMER_delay>
				LED_Off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	81 e4       	ldi	r24, 0x41	; 65
 24c:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
				TIMER_delay(500);
 250:	64 ef       	ldi	r22, 0xF4	; 244
 252:	71 e0       	ldi	r23, 0x01	; 1
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 a9 03 	call	0x752	; 0x752 <TIMER_delay>
			*/
			
			
			LED_Off(LED_CAR_PORT,LED_CAR_RED_PIN);
			//while green still on for pedestrians
			for (uint8_t i = 0; i < 5;i++)
 25c:	cf 5f       	subi	r28, 0xFF	; 255
 25e:	c5 30       	cpi	r28, 0x05	; 5
 260:	48 f3       	brcs	.-46     	; 0x234 <pedestrianMode+0x3e>
				LED_Off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
				TIMER_delay(500);
			} 
			
			//turn off ped green and turn on ped red and car green
			LED_Off(LED_PED_PORT,LED_CAR_GREEN_PIN);
 262:	62 e0       	ldi	r22, 0x02	; 2
 264:	82 e4       	ldi	r24, 0x42	; 66
 266:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
			LED_On(LED_PED_PORT,LED_CAR_RED_PIN);//ped red on
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	82 e4       	ldi	r24, 0x42	; 66
 26e:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
			LED_On(LED_CAR_PORT,LED_CAR_GREEN_PIN); //car green	
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	81 e4       	ldi	r24, 0x41	; 65
 276:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
			TIMER_delay(5000);
 27a:	68 e8       	ldi	r22, 0x88	; 136
 27c:	73 e1       	ldi	r23, 0x13	; 19
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 a9 03 	call	0x752	; 0x752 <TIMER_delay>
			
			LED_Off(LED_CAR_PORT,LED_CAR_GREEN_PIN); //turn off car green 
 286:	62 e0       	ldi	r22, 0x02	; 2
 288:	81 e4       	ldi	r24, 0x41	; 65
 28a:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
			blinkYellow(); //blink both yellow
 28e:	0e 94 7a 00 	call	0xf4	; 0xf4 <blinkYellow>
			LED_On(LED_CAR_PORT,LED_CAR_RED_PIN);//turn on car red and back to normal mode
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	81 e4       	ldi	r24, 0x41	; 65
 296:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
			//LED_off(LED_PED_PORT,LED_CAR_PORT_R_PIN);
			
			
			break;
 29a:	61 c0       	rjmp	.+194    	; 0x35e <pedestrianMode+0x168>
		
		case YELLOW:
			//1.both yellow blink for 5 seconds
			blinkYellow();
 29c:	0e 94 7a 00 	call	0xf4	; 0xf4 <blinkYellow>
		
			LED_Off(LED_CAR_PORT,LED_CAR_GREEN_PIN);	// CAR GREEN OFF
 2a0:	62 e0       	ldi	r22, 0x02	; 2
 2a2:	81 e4       	ldi	r24, 0x41	; 65
 2a4:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
			LED_On(LED_CAR_PORT,LED_CAR_RED_PIN);	//car red on
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	81 e4       	ldi	r24, 0x41	; 65
 2ac:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
			
			LED_Off(LED_PED_PORT,LED_PED_RED_PIN);	// PED RED OFF
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	82 e4       	ldi	r24, 0x42	; 66
 2b4:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
			LED_On(LED_PED_PORT,LED_PED_GREEN_PIN); //ped green on	
 2b8:	62 e0       	ldi	r22, 0x02	; 2
 2ba:	82 e4       	ldi	r24, 0x42	; 66
 2bc:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
			
			
			TIMER_delay(5000);
 2c0:	68 e8       	ldi	r22, 0x88	; 136
 2c2:	73 e1       	ldi	r23, 0x13	; 19
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 a9 03 	call	0x752	; 0x752 <TIMER_delay>
			
			
			blinkYellow();
 2cc:	0e 94 7a 00 	call	0xf4	; 0xf4 <blinkYellow>
			LED_Off(LED_CAR_PORT,LED_CAR_RED_PIN);	//car RED OFF
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	81 e4       	ldi	r24, 0x41	; 65
 2d4:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
			LED_Off(LED_PED_PORT,LED_CAR_GREEN_PIN); //ped green off
 2d8:	62 e0       	ldi	r22, 0x02	; 2
 2da:	82 e4       	ldi	r24, 0x42	; 66
 2dc:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
			
			LED_On(LED_CAR_PORT,LED_CAR_GREEN_PIN); //car green on
 2e0:	62 e0       	ldi	r22, 0x02	; 2
 2e2:	81 e4       	ldi	r24, 0x41	; 65
 2e4:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
			LED_On(LED_PED_PORT,LED_CAR_RED_PIN); //ped red on
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	82 e4       	ldi	r24, 0x42	; 66
 2ec:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
			TIMER_delay(5000);
 2f0:	68 e8       	ldi	r22, 0x88	; 136
 2f2:	73 e1       	ldi	r23, 0x13	; 19
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 a9 03 	call	0x752	; 0x752 <TIMER_delay>
			 			
 			break;
 2fc:	30 c0       	rjmp	.+96     	; 0x35e <pedestrianMode+0x168>
			
		case GREEN:
			blinkYellow();
 2fe:	0e 94 7a 00 	call	0xf4	; 0xf4 <blinkYellow>
			
			LED_Off(LED_CAR_PORT,LED_CAR_GREEN_PIN); //car green off
 302:	62 e0       	ldi	r22, 0x02	; 2
 304:	81 e4       	ldi	r24, 0x41	; 65
 306:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
			LED_On(LED_CAR_PORT,LED_CAR_RED_PIN); //car red on
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	81 e4       	ldi	r24, 0x41	; 65
 30e:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>

			LED_Off(LED_PED_PORT,LED_CAR_RED_PIN); //ped red off
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	82 e4       	ldi	r24, 0x42	; 66
 316:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
			LED_On(LED_PED_PORT,LED_CAR_GREEN_PIN); //ped green on
 31a:	62 e0       	ldi	r22, 0x02	; 2
 31c:	82 e4       	ldi	r24, 0x42	; 66
 31e:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
			
			TIMER_delay(5000);
 322:	68 e8       	ldi	r22, 0x88	; 136
 324:	73 e1       	ldi	r23, 0x13	; 19
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 a9 03 	call	0x752	; 0x752 <TIMER_delay>
	
			blinkYellow();
 32e:	0e 94 7a 00 	call	0xf4	; 0xf4 <blinkYellow>
					
			LED_Off(LED_PED_PORT,LED_CAR_GREEN_PIN); //ped green off
 332:	62 e0       	ldi	r22, 0x02	; 2
 334:	82 e4       	ldi	r24, 0x42	; 66
 336:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
			LED_On(LED_PED_PORT,LED_CAR_RED_PIN); //ped red on
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	82 e4       	ldi	r24, 0x42	; 66
 33e:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
			
			LED_Off(LED_CAR_PORT,LED_CAR_RED_PIN);
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	81 e4       	ldi	r24, 0x41	; 65
 346:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_Off>
			LED_On(LED_CAR_PORT,LED_CAR_GREEN_PIN); //car green on
 34a:	62 e0       	ldi	r22, 0x02	; 2
 34c:	81 e4       	ldi	r24, 0x41	; 65
 34e:	0e 94 c1 01 	call	0x382	; 0x382 <LED_On>
			
			TIMER_delay(5000);
 352:	68 e8       	ldi	r22, 0x88	; 136
 354:	73 e1       	ldi	r23, 0x13	; 19
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 a9 03 	call	0x752	; 0x752 <TIMER_delay>
			
			break;
	}
	
}
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <EXT_INT0_Exe>:
	}
}

void EXT_INT0_Exe(void)
{
	while(BUTTON_read(BUTTON_PORT,BUTTON_PIN) == Pressed);  
 362:	62 e0       	ldi	r22, 0x02	; 2
 364:	84 e4       	ldi	r24, 0x44	; 68
 366:	0e 94 cf 01 	call	0x39e	; 0x39e <BUTTON_read>
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	d1 f3       	breq	.-12     	; 0x362 <EXT_INT0_Exe>
	//LED_Toggle(PORT_C,PIN0);
	pedestrianMode();
 36e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pedestrianMode>
 372:	08 95       	ret

00000374 <App_Start>:

void App_Start(void)
{
	while(1)
	{
		NormalMode();
 374:	0e 94 9e 00 	call	0x13c	; 0x13c <NormalMode>
 378:	fd cf       	rjmp	.-6      	; 0x374 <App_Start>

0000037a <LED_Init>:
#include "LED.h"


void LED_Init(uint8_t ledPort,uint8_t ledPin)
{
	PIN_Init(ledPort,ledPin,OUTPUT);
 37a:	41 e0       	ldi	r20, 0x01	; 1
 37c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <PIN_Init>
 380:	08 95       	ret

00000382 <LED_On>:
}
void LED_On(uint8_t ledPort,uint8_t ledPin)
{
	PIN_Write(ledPort,ledPin,HIGH);
 382:	41 e0       	ldi	r20, 0x01	; 1
 384:	0e 94 54 02 	call	0x4a8	; 0x4a8 <PIN_Write>
 388:	08 95       	ret

0000038a <LED_Off>:
}
void LED_Off(uint8_t ledPort,uint8_t ledPin)
{
	PIN_Write(ledPort,ledPin,LOW);
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <PIN_Write>
 390:	08 95       	ret

00000392 <BUTTON_init>:
#include "Push_Button.h"


void BUTTON_init(uint8_t buttonPort,uint8_t buttonPin)
{
	PIN_Init(BUTTON_PORT,BUTTON_PIN,INPUNT);
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	62 e0       	ldi	r22, 0x02	; 2
 396:	84 e4       	ldi	r24, 0x44	; 68
 398:	0e 94 da 01 	call	0x3b4	; 0x3b4 <PIN_Init>
 39c:	08 95       	ret

0000039e <BUTTON_read>:
	 
}
int BUTTON_read(uint8_t buttonPort,uint8_t buttonPin)
{
	uint8_t reading = Not_Pressed;
	reading = PIN_Read(BUTTON_PORT,BUTTON_PIN);
 39e:	62 e0       	ldi	r22, 0x02	; 2
 3a0:	84 e4       	ldi	r24, 0x44	; 68
 3a2:	0e 94 ce 02 	call	0x59c	; 0x59c <PIN_Read>
	return reading;
}
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	08 95       	ret

000003aa <main>:
#include "App/App.h"


int main(void)
{
	App_init();
 3aa:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
   
    while (1) 
    {
		App_Start();
 3ae:	0e 94 ba 01 	call	0x374	; 0x374 <App_Start>
 3b2:	fd cf       	rjmp	.-6      	; 0x3ae <main+0x4>

000003b4 <PIN_Init>:

#include "DIO.h"

void PIN_Init(uint8_t portName, uint8_t pinNumber,uint8_t direction)
{
	switch (portName){
 3b4:	82 34       	cpi	r24, 0x42	; 66
 3b6:	31 f1       	breq	.+76     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3b8:	18 f4       	brcc	.+6      	; 0x3c0 <PIN_Init+0xc>
 3ba:	81 34       	cpi	r24, 0x41	; 65
 3bc:	39 f0       	breq	.+14     	; 0x3cc <PIN_Init+0x18>
 3be:	08 95       	ret
 3c0:	83 34       	cpi	r24, 0x43	; 67
 3c2:	e1 f1       	breq	.+120    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 3c4:	84 34       	cpi	r24, 0x44	; 68
 3c6:	09 f4       	brne	.+2      	; 0x3ca <PIN_Init+0x16>
 3c8:	54 c0       	rjmp	.+168    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 3ca:	08 95       	ret
		case PORT_A:
		if (direction == INPUNT)
 3cc:	41 11       	cpse	r20, r1
 3ce:	0c c0       	rjmp	.+24     	; 0x3e8 <PIN_Init+0x34>
		{
			CLR_BIT(DDRA, pinNumber);
 3d0:	2a b3       	in	r18, 0x1a	; 26
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <PIN_Init+0x28>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <PIN_Init+0x24>
 3e0:	80 95       	com	r24
 3e2:	82 23       	and	r24, r18
 3e4:	8a bb       	out	0x1a, r24	; 26
 3e6:	08 95       	ret
		}
		else if (direction == OUTPUT)
 3e8:	41 30       	cpi	r20, 0x01	; 1
 3ea:	09 f0       	breq	.+2      	; 0x3ee <PIN_Init+0x3a>
 3ec:	5c c0       	rjmp	.+184    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
		{		
			SET_BIT(DDRA, pinNumber);
 3ee:	2a b3       	in	r18, 0x1a	; 26
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <PIN_Init+0x46>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <PIN_Init+0x42>
 3fe:	82 2b       	or	r24, r18
 400:	8a bb       	out	0x1a, r24	; 26
 402:	08 95       	ret
		else
		{
		}
		break;
		case PORT_B:
		if (direction == INPUNT)
 404:	41 11       	cpse	r20, r1
 406:	0c c0       	rjmp	.+24     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
		{
			CLR_BIT(DDRB, pinNumber);
 408:	27 b3       	in	r18, 0x17	; 23
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	80 95       	com	r24
 41a:	82 23       	and	r24, r18
 41c:	87 bb       	out	0x17, r24	; 23
 41e:	08 95       	ret
		}
		else if (direction == OUTPUT)
 420:	41 30       	cpi	r20, 0x01	; 1
 422:	09 f0       	breq	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 424:	40 c0       	rjmp	.+128    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
		{
			SET_BIT(DDRB, pinNumber);
 426:	27 b3       	in	r18, 0x17	; 23
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	82 2b       	or	r24, r18
 438:	87 bb       	out	0x17, r24	; 23
 43a:	08 95       	ret
		else
		{
		}
		break;
		case PORT_C:
		if (direction == INPUNT)
 43c:	41 11       	cpse	r20, r1
 43e:	0c c0       	rjmp	.+24     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
		{
			CLR_BIT(DDRB, pinNumber);
 440:	27 b3       	in	r18, 0x17	; 23
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	6a 95       	dec	r22
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	80 95       	com	r24
 452:	82 23       	and	r24, r18
 454:	87 bb       	out	0x17, r24	; 23
 456:	08 95       	ret
		}
		else if (direction == OUTPUT)
 458:	41 30       	cpi	r20, 0x01	; 1
 45a:	29 f5       	brne	.+74     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
		{	
			SET_BIT(DDRC, pinNumber);
 45c:	24 b3       	in	r18, 0x14	; 20
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	6a 95       	dec	r22
 46a:	e2 f7       	brpl	.-8      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 46c:	82 2b       	or	r24, r18
 46e:	84 bb       	out	0x14, r24	; 20
 470:	08 95       	ret
		{
		}
		break;
		
		case PORT_D:
		if (direction == INPUNT)
 472:	41 11       	cpse	r20, r1
 474:	0c c0       	rjmp	.+24     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
		{
			CLR_BIT(DDRD, pinNumber);
 476:	21 b3       	in	r18, 0x11	; 17
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	02 c0       	rjmp	.+4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	6a 95       	dec	r22
 484:	e2 f7       	brpl	.-8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 486:	80 95       	com	r24
 488:	82 23       	and	r24, r18
 48a:	81 bb       	out	0x11, r24	; 17
 48c:	08 95       	ret
		}
		else if (direction == OUTPUT)
 48e:	41 30       	cpi	r20, 0x01	; 1
 490:	51 f4       	brne	.+20     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
		{
			SET_BIT(DDRD, pinNumber);
 492:	21 b3       	in	r18, 0x11	; 17
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	6a 95       	dec	r22
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 4a2:	82 2b       	or	r24, r18
 4a4:	81 bb       	out	0x11, r24	; 17
 4a6:	08 95       	ret

000004a8 <PIN_Write>:
		break;
	}
}
void PIN_Write(uint8_t portName, uint8_t pinNumber,uint8_t value)
{
	switch (portName)
 4a8:	82 34       	cpi	r24, 0x42	; 66
 4aa:	31 f1       	breq	.+76     	; 0x4f8 <PIN_Write+0x50>
 4ac:	18 f4       	brcc	.+6      	; 0x4b4 <PIN_Write+0xc>
 4ae:	81 34       	cpi	r24, 0x41	; 65
 4b0:	39 f0       	breq	.+14     	; 0x4c0 <PIN_Write+0x18>
 4b2:	08 95       	ret
 4b4:	83 34       	cpi	r24, 0x43	; 67
 4b6:	e1 f1       	breq	.+120    	; 0x530 <PIN_Write+0x88>
 4b8:	84 34       	cpi	r24, 0x44	; 68
 4ba:	09 f4       	brne	.+2      	; 0x4be <PIN_Write+0x16>
 4bc:	54 c0       	rjmp	.+168    	; 0x566 <PIN_Write+0xbe>
 4be:	08 95       	ret
	{
		case PORT_A:
		if (value == LOW)
 4c0:	41 11       	cpse	r20, r1
 4c2:	0c c0       	rjmp	.+24     	; 0x4dc <PIN_Write+0x34>
		{
			CLR_BIT(PORTA,pinNumber);
 4c4:	2b b3       	in	r18, 0x1b	; 27
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <PIN_Write+0x28>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	6a 95       	dec	r22
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <PIN_Write+0x24>
 4d4:	80 95       	com	r24
 4d6:	82 23       	and	r24, r18
 4d8:	8b bb       	out	0x1b, r24	; 27
 4da:	08 95       	ret
		}
		else if(value == HIGH)
 4dc:	41 30       	cpi	r20, 0x01	; 1
 4de:	09 f0       	breq	.+2      	; 0x4e2 <PIN_Write+0x3a>
 4e0:	5c c0       	rjmp	.+184    	; 0x59a <PIN_Write+0xf2>
		{
			SET_BIT(PORTA,pinNumber);
 4e2:	2b b3       	in	r18, 0x1b	; 27
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <PIN_Write+0x46>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <PIN_Write+0x42>
 4f2:	82 2b       	or	r24, r18
 4f4:	8b bb       	out	0x1b, r24	; 27
 4f6:	08 95       	ret
		else
		{
		}
		break;
		case PORT_B:
		if (value == LOW)
 4f8:	41 11       	cpse	r20, r1
 4fa:	0c c0       	rjmp	.+24     	; 0x514 <PIN_Write+0x6c>
		{
			CLR_BIT(PORTB,pinNumber);
 4fc:	28 b3       	in	r18, 0x18	; 24
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <PIN_Write+0x60>
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <PIN_Write+0x5c>
 50c:	80 95       	com	r24
 50e:	82 23       	and	r24, r18
 510:	88 bb       	out	0x18, r24	; 24
 512:	08 95       	ret
		}
		else if(value == HIGH)
 514:	41 30       	cpi	r20, 0x01	; 1
 516:	09 f0       	breq	.+2      	; 0x51a <PIN_Write+0x72>
 518:	40 c0       	rjmp	.+128    	; 0x59a <PIN_Write+0xf2>
		{
			SET_BIT(PORTB,pinNumber);
 51a:	28 b3       	in	r18, 0x18	; 24
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <PIN_Write+0x7e>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	6a 95       	dec	r22
 528:	e2 f7       	brpl	.-8      	; 0x522 <PIN_Write+0x7a>
 52a:	82 2b       	or	r24, r18
 52c:	88 bb       	out	0x18, r24	; 24
 52e:	08 95       	ret
		else
		{
		}
		break;
		case PORT_C:
		if (value == LOW)
 530:	41 11       	cpse	r20, r1
 532:	0c c0       	rjmp	.+24     	; 0x54c <PIN_Write+0xa4>
		{
			CLR_BIT(PORTC,pinNumber);
 534:	25 b3       	in	r18, 0x15	; 21
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <PIN_Write+0x98>
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	6a 95       	dec	r22
 542:	e2 f7       	brpl	.-8      	; 0x53c <PIN_Write+0x94>
 544:	80 95       	com	r24
 546:	82 23       	and	r24, r18
 548:	85 bb       	out	0x15, r24	; 21
 54a:	08 95       	ret
		}
		else if(value == HIGH)
 54c:	41 30       	cpi	r20, 0x01	; 1
 54e:	29 f5       	brne	.+74     	; 0x59a <PIN_Write+0xf2>
		{
			SET_BIT(PORTC,pinNumber);
 550:	25 b3       	in	r18, 0x15	; 21
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	02 c0       	rjmp	.+4      	; 0x55c <PIN_Write+0xb4>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	6a 95       	dec	r22
 55e:	e2 f7       	brpl	.-8      	; 0x558 <PIN_Write+0xb0>
 560:	82 2b       	or	r24, r18
 562:	85 bb       	out	0x15, r24	; 21
 564:	08 95       	ret
		else
		{
		}
		break;
		case PORT_D:
		if (value == LOW)
 566:	41 11       	cpse	r20, r1
 568:	0c c0       	rjmp	.+24     	; 0x582 <PIN_Write+0xda>
		{
			CLR_BIT(PORTD,pinNumber);
 56a:	22 b3       	in	r18, 0x12	; 18
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <PIN_Write+0xce>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <PIN_Write+0xca>
 57a:	80 95       	com	r24
 57c:	82 23       	and	r24, r18
 57e:	82 bb       	out	0x12, r24	; 18
 580:	08 95       	ret
		}
		else if(value == HIGH)
 582:	41 30       	cpi	r20, 0x01	; 1
 584:	51 f4       	brne	.+20     	; 0x59a <PIN_Write+0xf2>
		{
			SET_BIT(PORTD,pinNumber);
 586:	22 b3       	in	r18, 0x12	; 18
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <PIN_Write+0xea>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	6a 95       	dec	r22
 594:	e2 f7       	brpl	.-8      	; 0x58e <PIN_Write+0xe6>
 596:	82 2b       	or	r24, r18
 598:	82 bb       	out	0x12, r24	; 18
 59a:	08 95       	ret

0000059c <PIN_Read>:
	}
}
uint8_t PIN_Read(uint8_t portName, uint8_t pinNumber)
{
	uint8_t reading=0;
	switch(portName){
 59c:	82 34       	cpi	r24, 0x42	; 66
 59e:	91 f0       	breq	.+36     	; 0x5c4 <PIN_Read+0x28>
 5a0:	18 f4       	brcc	.+6      	; 0x5a8 <PIN_Read+0xc>
 5a2:	81 34       	cpi	r24, 0x41	; 65
 5a4:	31 f0       	breq	.+12     	; 0x5b2 <PIN_Read+0x16>
 5a6:	29 c0       	rjmp	.+82     	; 0x5fa <PIN_Read+0x5e>
 5a8:	83 34       	cpi	r24, 0x43	; 67
 5aa:	a9 f0       	breq	.+42     	; 0x5d6 <PIN_Read+0x3a>
 5ac:	84 34       	cpi	r24, 0x44	; 68
 5ae:	e1 f0       	breq	.+56     	; 0x5e8 <PIN_Read+0x4c>
 5b0:	24 c0       	rjmp	.+72     	; 0x5fa <PIN_Read+0x5e>
		case PORT_A:
		//*reading = (PINA&(1<<pinNumber))>>pinNumber;
		reading =	GET_BIT(PINA,pinNumber); 
 5b2:	89 b3       	in	r24, 0x19	; 25
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <PIN_Read+0x20>
 5b8:	95 95       	asr	r25
 5ba:	87 95       	ror	r24
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <PIN_Read+0x1c>
 5c0:	81 70       	andi	r24, 0x01	; 1
		break;
 5c2:	08 95       	ret
		
		case PORT_B:
		reading =	GET_BIT(PINB,pinNumber);
 5c4:	86 b3       	in	r24, 0x16	; 22
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <PIN_Read+0x32>
 5ca:	95 95       	asr	r25
 5cc:	87 95       	ror	r24
 5ce:	6a 95       	dec	r22
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <PIN_Read+0x2e>
 5d2:	81 70       	andi	r24, 0x01	; 1
		break;
 5d4:	08 95       	ret
		
		case PORT_C:
		reading = GET_BIT(PINC,pinNumber);
 5d6:	83 b3       	in	r24, 0x13	; 19
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <PIN_Read+0x44>
 5dc:	95 95       	asr	r25
 5de:	87 95       	ror	r24
 5e0:	6a 95       	dec	r22
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <PIN_Read+0x40>
 5e4:	81 70       	andi	r24, 0x01	; 1
		break;
 5e6:	08 95       	ret
		
		case PORT_D:
		reading = GET_BIT(PIND,pinNumber);
 5e8:	80 b3       	in	r24, 0x10	; 16
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <PIN_Read+0x56>
 5ee:	95 95       	asr	r25
 5f0:	87 95       	ror	r24
 5f2:	6a 95       	dec	r22
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <PIN_Read+0x52>
 5f6:	81 70       	andi	r24, 0x01	; 1
		break;
 5f8:	08 95       	ret
		break;
	}
}
uint8_t PIN_Read(uint8_t portName, uint8_t pinNumber)
{
	uint8_t reading=0;
 5fa:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_D:
		reading = GET_BIT(PIND,pinNumber);
		break;
	}
	return reading;
}
 5fc:	08 95       	ret

000005fe <EXT_INT_EnableGlobal>:
{
	switch(interrupt)
	{
		case EX_INT0 : CLR_BIT(GICR,INT0);break;
		case EX_INT1 : CLR_BIT(GICR,INT1);break;
		case EX_INT2 : CLR_BIT(GICR,INT2);break;
 5fe:	8f b7       	in	r24, 0x3f	; 63
 600:	80 68       	ori	r24, 0x80	; 128
 602:	8f bf       	out	0x3f, r24	; 63
 604:	08 95       	ret

00000606 <EXT_INT_ENABLE>:
 606:	81 30       	cpi	r24, 0x01	; 1
 608:	41 f0       	breq	.+16     	; 0x61a <EXT_INT_ENABLE+0x14>
 60a:	18 f0       	brcs	.+6      	; 0x612 <EXT_INT_ENABLE+0xc>
 60c:	82 30       	cpi	r24, 0x02	; 2
 60e:	49 f0       	breq	.+18     	; 0x622 <EXT_INT_ENABLE+0x1c>
 610:	08 95       	ret
 612:	8b b7       	in	r24, 0x3b	; 59
 614:	80 64       	ori	r24, 0x40	; 64
 616:	8b bf       	out	0x3b, r24	; 59
 618:	08 95       	ret
 61a:	8b b7       	in	r24, 0x3b	; 59
 61c:	80 68       	ori	r24, 0x80	; 128
 61e:	8b bf       	out	0x3b, r24	; 59
 620:	08 95       	ret
 622:	8b b7       	in	r24, 0x3b	; 59
 624:	80 62       	ori	r24, 0x20	; 32
 626:	8b bf       	out	0x3b, r24	; 59
 628:	08 95       	ret

0000062a <EXT_INT_TriggerEdge>:
	}
}

void EXT_INT_TriggerEdge(EXT_INT_NO interrupt,TriggerEdge_Type TriggerType)
{
	switch(interrupt)
 62a:	81 30       	cpi	r24, 0x01	; 1
 62c:	49 f1       	breq	.+82     	; 0x680 <EXT_INT_TriggerEdge+0x56>
 62e:	20 f0       	brcs	.+8      	; 0x638 <EXT_INT_TriggerEdge+0xe>
 630:	82 30       	cpi	r24, 0x02	; 2
 632:	09 f4       	brne	.+2      	; 0x636 <EXT_INT_TriggerEdge+0xc>
 634:	49 c0       	rjmp	.+146    	; 0x6c8 <EXT_INT_TriggerEdge+0x9e>
 636:	08 95       	ret
	{
		case EX_INT0 :
		switch(TriggerType)
 638:	61 30       	cpi	r22, 0x01	; 1
 63a:	69 f0       	breq	.+26     	; 0x656 <EXT_INT_TriggerEdge+0x2c>
 63c:	28 f0       	brcs	.+10     	; 0x648 <EXT_INT_TriggerEdge+0x1e>
 63e:	62 30       	cpi	r22, 0x02	; 2
 640:	c1 f0       	breq	.+48     	; 0x672 <EXT_INT_TriggerEdge+0x48>
 642:	63 30       	cpi	r22, 0x03	; 3
 644:	79 f0       	breq	.+30     	; 0x664 <EXT_INT_TriggerEdge+0x3a>
 646:	08 95       	ret
		{
			case LOW_LEVEL :
			CLR_BIT(MCUCR,0);	// ISC00
 648:	85 b7       	in	r24, 0x35	; 53
 64a:	8e 7f       	andi	r24, 0xFE	; 254
 64c:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,1);	// ISC01
 64e:	85 b7       	in	r24, 0x35	; 53
 650:	8d 7f       	andi	r24, 0xFD	; 253
 652:	85 bf       	out	0x35, r24	; 53
			break;
 654:	08 95       	ret
			case LOGIC_CHANGE :
			SET_BIT(MCUCR,0);	// ISC00
 656:	85 b7       	in	r24, 0x35	; 53
 658:	81 60       	ori	r24, 0x01	; 1
 65a:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,1);	// ISC01
 65c:	85 b7       	in	r24, 0x35	; 53
 65e:	8d 7f       	andi	r24, 0xFD	; 253
 660:	85 bf       	out	0x35, r24	; 53
			break;
 662:	08 95       	ret
			case FALLING_EDGE :
			CLR_BIT(MCUCR,0);	// ISC00
 664:	85 b7       	in	r24, 0x35	; 53
 666:	8e 7f       	andi	r24, 0xFE	; 254
 668:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,1);	// ISC01
 66a:	85 b7       	in	r24, 0x35	; 53
 66c:	82 60       	ori	r24, 0x02	; 2
 66e:	85 bf       	out	0x35, r24	; 53
			break;
 670:	08 95       	ret
			case RISING_EDGE :
			SET_BIT(MCUCR,0);	// ISC00
 672:	85 b7       	in	r24, 0x35	; 53
 674:	81 60       	ori	r24, 0x01	; 1
 676:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,1);	// ISC01
 678:	85 b7       	in	r24, 0x35	; 53
 67a:	82 60       	ori	r24, 0x02	; 2
 67c:	85 bf       	out	0x35, r24	; 53
			break;
 67e:	08 95       	ret
		}break;
		case EX_INT1 :
		switch(TriggerType)
 680:	61 30       	cpi	r22, 0x01	; 1
 682:	69 f0       	breq	.+26     	; 0x69e <EXT_INT_TriggerEdge+0x74>
 684:	28 f0       	brcs	.+10     	; 0x690 <EXT_INT_TriggerEdge+0x66>
 686:	62 30       	cpi	r22, 0x02	; 2
 688:	c1 f0       	breq	.+48     	; 0x6ba <EXT_INT_TriggerEdge+0x90>
 68a:	63 30       	cpi	r22, 0x03	; 3
 68c:	79 f0       	breq	.+30     	; 0x6ac <EXT_INT_TriggerEdge+0x82>
 68e:	08 95       	ret
		{
			case LOW_LEVEL :
			CLR_BIT(MCUCR,2);	// ISC10
 690:	85 b7       	in	r24, 0x35	; 53
 692:	8b 7f       	andi	r24, 0xFB	; 251
 694:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,3);	// ISC11
 696:	85 b7       	in	r24, 0x35	; 53
 698:	87 7f       	andi	r24, 0xF7	; 247
 69a:	85 bf       	out	0x35, r24	; 53
			break;
 69c:	08 95       	ret
			case LOGIC_CHANGE :
			SET_BIT(MCUCR,2);	//ISC10
 69e:	85 b7       	in	r24, 0x35	; 53
 6a0:	84 60       	ori	r24, 0x04	; 4
 6a2:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,3);	//ISC11
 6a4:	85 b7       	in	r24, 0x35	; 53
 6a6:	87 7f       	andi	r24, 0xF7	; 247
 6a8:	85 bf       	out	0x35, r24	; 53
			break;
 6aa:	08 95       	ret
			case FALLING_EDGE :
			CLR_BIT(MCUCR,2);	//ISC10
 6ac:	85 b7       	in	r24, 0x35	; 53
 6ae:	8b 7f       	andi	r24, 0xFB	; 251
 6b0:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,3);	//ISC11
 6b2:	85 b7       	in	r24, 0x35	; 53
 6b4:	88 60       	ori	r24, 0x08	; 8
 6b6:	85 bf       	out	0x35, r24	; 53
			break;
 6b8:	08 95       	ret
			case RISING_EDGE :
			SET_BIT(MCUCR,2);	//ISC10
 6ba:	85 b7       	in	r24, 0x35	; 53
 6bc:	84 60       	ori	r24, 0x04	; 4
 6be:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,3);	//ISC11
 6c0:	85 b7       	in	r24, 0x35	; 53
 6c2:	88 60       	ori	r24, 0x08	; 8
 6c4:	85 bf       	out	0x35, r24	; 53
			break;
 6c6:	08 95       	ret
		}break;
		case EX_INT2 :
		switch(TriggerType)
 6c8:	62 30       	cpi	r22, 0x02	; 2
 6ca:	31 f0       	breq	.+12     	; 0x6d8 <EXT_INT_TriggerEdge+0xae>
 6cc:	63 30       	cpi	r22, 0x03	; 3
 6ce:	41 f4       	brne	.+16     	; 0x6e0 <EXT_INT_TriggerEdge+0xb6>
		{
			case FALLING_EDGE :
			CLR_BIT(MCUCR,6);	// ISC2
 6d0:	85 b7       	in	r24, 0x35	; 53
 6d2:	8f 7b       	andi	r24, 0xBF	; 191
 6d4:	85 bf       	out	0x35, r24	; 53
			break;
 6d6:	08 95       	ret
			case RISING_EDGE :
			SET_BIT(MCUCR,6);	// ISC2
 6d8:	85 b7       	in	r24, 0x35	; 53
 6da:	80 64       	ori	r24, 0x40	; 64
 6dc:	85 bf       	out	0x35, r24	; 53
			break;
 6de:	08 95       	ret
			default : 
			SET_BIT(MCUCR,6);	// ISC2
 6e0:	85 b7       	in	r24, 0x35	; 53
 6e2:	80 64       	ori	r24, 0x40	; 64
 6e4:	85 bf       	out	0x35, r24	; 53
 6e6:	08 95       	ret

000006e8 <EXT_INT_SetCallBack>:

/*************Call Back function***************/

 void EXT_INT_SetCallBack(EXT_INT_NO Interrupt,void(*LocalPtr)(void))
 {
 	switch(Interrupt){
 6e8:	81 11       	cpse	r24, r1
 6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <EXT_INT_SetCallBack+0xc>
 		case EX_INT0: INT0_Fptr=LocalPtr; break;
 6ec:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <__data_end+0x1>
 6f0:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__data_end>
 6f4:	08 95       	ret

000006f6 <__vector_1>:
//		 INT0_Fptr=LocalPtr; 
//	
//}

_ISR(INT0_VECT)
{
 6f6:	1f 92       	push	r1
 6f8:	0f 92       	push	r0
 6fa:	0f b6       	in	r0, 0x3f	; 63
 6fc:	0f 92       	push	r0
 6fe:	11 24       	eor	r1, r1
 700:	2f 93       	push	r18
 702:	3f 93       	push	r19
 704:	4f 93       	push	r20
 706:	5f 93       	push	r21
 708:	6f 93       	push	r22
 70a:	7f 93       	push	r23
 70c:	8f 93       	push	r24
 70e:	9f 93       	push	r25
 710:	af 93       	push	r26
 712:	bf 93       	push	r27
 714:	ef 93       	push	r30
 716:	ff 93       	push	r31
	INT0_Fptr();
 718:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 71c:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 720:	09 95       	icall
}
 722:	ff 91       	pop	r31
 724:	ef 91       	pop	r30
 726:	bf 91       	pop	r27
 728:	af 91       	pop	r26
 72a:	9f 91       	pop	r25
 72c:	8f 91       	pop	r24
 72e:	7f 91       	pop	r23
 730:	6f 91       	pop	r22
 732:	5f 91       	pop	r21
 734:	4f 91       	pop	r20
 736:	3f 91       	pop	r19
 738:	2f 91       	pop	r18
 73a:	0f 90       	pop	r0
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	0f 90       	pop	r0
 740:	1f 90       	pop	r1
 742:	18 95       	reti

00000744 <TIMER_init>:


void TIMER_init()
{
	
	CLR_BIT(TCCR0,3);
 744:	83 b7       	in	r24, 0x33	; 51
 746:	87 7f       	andi	r24, 0xF7	; 247
 748:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,6);
 74a:	83 b7       	in	r24, 0x33	; 51
 74c:	8f 7b       	andi	r24, 0xBF	; 191
 74e:	83 bf       	out	0x33, r24	; 51
 750:	08 95       	ret

00000752 <TIMER_delay>:
		SET_BIT(MCUCR,1);	//setting interrupts to rising edge
		SET_BIT(MCUCR,0);*/
}

void TIMER_delay(uint32_t millisec)
{uint16_t numberOfOverflows, TimerInitial, overflow_Counter ;
 752:	8f 92       	push	r8
 754:	9f 92       	push	r9
 756:	af 92       	push	r10
 758:	bf 92       	push	r11
 75a:	cf 92       	push	r12
 75c:	df 92       	push	r13
 75e:	ef 92       	push	r14
 760:	ff 92       	push	r15
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
 766:	4b 01       	movw	r8, r22
 768:	5c 01       	movw	r10, r24
	double maxDelay;
	overflow_Counter = 0;
	maxDelay = 262.144; //max delay in ms possible with this timer configuration

	if(millisec<maxDelay)
 76a:	0e 94 55 05 	call	0xaaa	; 0xaaa <__floatunsisf>
 76e:	6b 01       	movw	r12, r22
 770:	7c 01       	movw	r14, r24
 772:	2f e6       	ldi	r18, 0x6F	; 111
 774:	32 e1       	ldi	r19, 0x12	; 18
 776:	43 e8       	ldi	r20, 0x83	; 131
 778:	53 e4       	ldi	r21, 0x43	; 67
 77a:	0e 94 af 04 	call	0x95e	; 0x95e <__cmpsf2>
 77e:	88 23       	and	r24, r24
 780:	9c f4       	brge	.+38     	; 0x7a8 <TIMER_delay+0x56>
	{
		TimerInitial = (maxDelay-millisec)/tickTime;
 782:	a7 01       	movw	r20, r14
 784:	96 01       	movw	r18, r12
 786:	6f e6       	ldi	r22, 0x6F	; 111
 788:	72 e1       	ldi	r23, 0x12	; 18
 78a:	83 e8       	ldi	r24, 0x83	; 131
 78c:	93 e4       	ldi	r25, 0x43	; 67
 78e:	0e 94 2b 04 	call	0x856	; 0x856 <__subsf3>
 792:	2f e6       	ldi	r18, 0x6F	; 111
 794:	32 e1       	ldi	r19, 0x12	; 18
 796:	43 e8       	ldi	r20, 0x83	; 131
 798:	5f e3       	ldi	r21, 0x3F	; 63
 79a:	0e 94 b4 04 	call	0x968	; 0x968 <__divsf3>
 79e:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fixunssfsi>
		numberOfOverflows = 1;
 7a2:	c1 e0       	ldi	r28, 0x01	; 1
 7a4:	d0 e0       	ldi	r29, 0x00	; 0
 7a6:	36 c0       	rjmp	.+108    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
	}
	else if (millisec == (uint16_t) maxDelay)
 7a8:	86 e0       	ldi	r24, 0x06	; 6
 7aa:	88 16       	cp	r8, r24
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	98 06       	cpc	r9, r24
 7b0:	a1 04       	cpc	r10, r1
 7b2:	b1 04       	cpc	r11, r1
 7b4:	61 f1       	breq	.+88     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
		TimerInitial = 0;
		numberOfOverflows = 1;
	}
	else
	{
		numberOfOverflows = ceil((uint16_t) (millisec/maxDelay));
 7b6:	2f e6       	ldi	r18, 0x6F	; 111
 7b8:	32 e1       	ldi	r19, 0x12	; 18
 7ba:	43 e8       	ldi	r20, 0x83	; 131
 7bc:	53 e4       	ldi	r21, 0x43	; 67
 7be:	c7 01       	movw	r24, r14
 7c0:	b6 01       	movw	r22, r12
 7c2:	0e 94 b4 04 	call	0x968	; 0x968 <__divsf3>
 7c6:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fixunssfsi>
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	0e 94 55 05 	call	0xaaa	; 0xaaa <__floatunsisf>
 7d2:	0e 94 98 04 	call	0x930	; 0x930 <ceil>
 7d6:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fixunssfsi>
 7da:	eb 01       	movw	r28, r22
		TimerInitial = 256 - (maxDelay-millisec)/tickTime;
 7dc:	a7 01       	movw	r20, r14
 7de:	96 01       	movw	r18, r12
 7e0:	6f e6       	ldi	r22, 0x6F	; 111
 7e2:	72 e1       	ldi	r23, 0x12	; 18
 7e4:	83 e8       	ldi	r24, 0x83	; 131
 7e6:	93 e4       	ldi	r25, 0x43	; 67
 7e8:	0e 94 2b 04 	call	0x856	; 0x856 <__subsf3>
 7ec:	2f e6       	ldi	r18, 0x6F	; 111
 7ee:	32 e1       	ldi	r19, 0x12	; 18
 7f0:	43 e8       	ldi	r20, 0x83	; 131
 7f2:	5f e3       	ldi	r21, 0x3F	; 63
 7f4:	0e 94 b4 04 	call	0x968	; 0x968 <__divsf3>
 7f8:	9b 01       	movw	r18, r22
 7fa:	ac 01       	movw	r20, r24
 7fc:	60 e0       	ldi	r22, 0x00	; 0
 7fe:	70 e0       	ldi	r23, 0x00	; 0
 800:	80 e8       	ldi	r24, 0x80	; 128
 802:	93 e4       	ldi	r25, 0x43	; 67
 804:	0e 94 2b 04 	call	0x856	; 0x856 <__subsf3>
 808:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fixunssfsi>
 80c:	03 c0       	rjmp	.+6      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		TimerInitial = (maxDelay-millisec)/tickTime;
		numberOfOverflows = 1;
	}
	else if (millisec == (uint16_t) maxDelay)
	{
		TimerInitial = 0;
 80e:	60 e0       	ldi	r22, 0x00	; 0
		numberOfOverflows = 1;
 810:	c1 e0       	ldi	r28, 0x01	; 1
 812:	d0 e0       	ldi	r29, 0x00	; 0
	{
		numberOfOverflows = ceil((uint16_t) (millisec/maxDelay));
		TimerInitial = 256 - (maxDelay-millisec)/tickTime;
	}

	TCNT0 = TimerInitial;
 814:	62 bf       	out	0x32, r22	; 50


	// Set prescaler to 1024 and start timer
	SET_BIT(TCCR0,0);
 816:	83 b7       	in	r24, 0x33	; 51
 818:	81 60       	ori	r24, 0x01	; 1
 81a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,2);
 81c:	83 b7       	in	r24, 0x33	; 51
 81e:	84 60       	ori	r24, 0x04	; 4
 820:	83 bf       	out	0x33, r24	; 51
}

void TIMER_delay(uint32_t millisec)
{uint16_t numberOfOverflows, TimerInitial, overflow_Counter ;
	double maxDelay;
	overflow_Counter = 0;
 822:	20 e0       	ldi	r18, 0x00	; 0
 824:	30 e0       	ldi	r19, 0x00	; 0

	// Set prescaler to 1024 and start timer
	SET_BIT(TCCR0,0);
	SET_BIT(TCCR0,2);

	while (overflow_Counter != numberOfOverflows)
 826:	08 c0       	rjmp	.+16     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
	{
		while((TIFR & (1<<0)) == 0);
 828:	08 b6       	in	r0, 0x38	; 56
 82a:	00 fe       	sbrs	r0, 0
 82c:	fd cf       	rjmp	.-6      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		//TIFR |= (1<<0);	//reset overflow flag
		
		SET_BIT(TIFR,0);
 82e:	88 b7       	in	r24, 0x38	; 56
 830:	81 60       	ori	r24, 0x01	; 1
 832:	88 bf       	out	0x38, r24	; 56
		overflow_Counter = overflow_Counter + 1 ;
 834:	2f 5f       	subi	r18, 0xFF	; 255
 836:	3f 4f       	sbci	r19, 0xFF	; 255

	// Set prescaler to 1024 and start timer
	SET_BIT(TCCR0,0);
	SET_BIT(TCCR0,2);

	while (overflow_Counter != numberOfOverflows)
 838:	c2 17       	cp	r28, r18
 83a:	d3 07       	cpc	r29, r19
 83c:	a9 f7       	brne	.-22     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		
		SET_BIT(TIFR,0);
		overflow_Counter = overflow_Counter + 1 ;
		
	}
	TCCR0 = 0;			//stop timer
 83e:	13 be       	out	0x33, r1	; 51
	return ;
	
 840:	df 91       	pop	r29
 842:	cf 91       	pop	r28
 844:	ff 90       	pop	r15
 846:	ef 90       	pop	r14
 848:	df 90       	pop	r13
 84a:	cf 90       	pop	r12
 84c:	bf 90       	pop	r11
 84e:	af 90       	pop	r10
 850:	9f 90       	pop	r9
 852:	8f 90       	pop	r8
 854:	08 95       	ret

00000856 <__subsf3>:
 856:	50 58       	subi	r21, 0x80	; 128

00000858 <__addsf3>:
 858:	bb 27       	eor	r27, r27
 85a:	aa 27       	eor	r26, r26
 85c:	0e 94 43 04 	call	0x886	; 0x886 <__addsf3x>
 860:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_round>
 864:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__fp_pscA>
 868:	38 f0       	brcs	.+14     	; 0x878 <__stack+0x19>
 86a:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_pscB>
 86e:	20 f0       	brcs	.+8      	; 0x878 <__stack+0x19>
 870:	39 f4       	brne	.+14     	; 0x880 <__stack+0x21>
 872:	9f 3f       	cpi	r25, 0xFF	; 255
 874:	19 f4       	brne	.+6      	; 0x87c <__stack+0x1d>
 876:	26 f4       	brtc	.+8      	; 0x880 <__stack+0x21>
 878:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__fp_nan>
 87c:	0e f4       	brtc	.+2      	; 0x880 <__stack+0x21>
 87e:	e0 95       	com	r30
 880:	e7 fb       	bst	r30, 7
 882:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_inf>

00000886 <__addsf3x>:
 886:	e9 2f       	mov	r30, r25
 888:	0e 94 07 06 	call	0xc0e	; 0xc0e <__fp_split3>
 88c:	58 f3       	brcs	.-42     	; 0x864 <__stack+0x5>
 88e:	ba 17       	cp	r27, r26
 890:	62 07       	cpc	r22, r18
 892:	73 07       	cpc	r23, r19
 894:	84 07       	cpc	r24, r20
 896:	95 07       	cpc	r25, r21
 898:	20 f0       	brcs	.+8      	; 0x8a2 <__addsf3x+0x1c>
 89a:	79 f4       	brne	.+30     	; 0x8ba <__addsf3x+0x34>
 89c:	a6 f5       	brtc	.+104    	; 0x906 <__addsf3x+0x80>
 89e:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_zero>
 8a2:	0e f4       	brtc	.+2      	; 0x8a6 <__addsf3x+0x20>
 8a4:	e0 95       	com	r30
 8a6:	0b 2e       	mov	r0, r27
 8a8:	ba 2f       	mov	r27, r26
 8aa:	a0 2d       	mov	r26, r0
 8ac:	0b 01       	movw	r0, r22
 8ae:	b9 01       	movw	r22, r18
 8b0:	90 01       	movw	r18, r0
 8b2:	0c 01       	movw	r0, r24
 8b4:	ca 01       	movw	r24, r20
 8b6:	a0 01       	movw	r20, r0
 8b8:	11 24       	eor	r1, r1
 8ba:	ff 27       	eor	r31, r31
 8bc:	59 1b       	sub	r21, r25
 8be:	99 f0       	breq	.+38     	; 0x8e6 <__addsf3x+0x60>
 8c0:	59 3f       	cpi	r21, 0xF9	; 249
 8c2:	50 f4       	brcc	.+20     	; 0x8d8 <__addsf3x+0x52>
 8c4:	50 3e       	cpi	r21, 0xE0	; 224
 8c6:	68 f1       	brcs	.+90     	; 0x922 <__addsf3x+0x9c>
 8c8:	1a 16       	cp	r1, r26
 8ca:	f0 40       	sbci	r31, 0x00	; 0
 8cc:	a2 2f       	mov	r26, r18
 8ce:	23 2f       	mov	r18, r19
 8d0:	34 2f       	mov	r19, r20
 8d2:	44 27       	eor	r20, r20
 8d4:	58 5f       	subi	r21, 0xF8	; 248
 8d6:	f3 cf       	rjmp	.-26     	; 0x8be <__addsf3x+0x38>
 8d8:	46 95       	lsr	r20
 8da:	37 95       	ror	r19
 8dc:	27 95       	ror	r18
 8de:	a7 95       	ror	r26
 8e0:	f0 40       	sbci	r31, 0x00	; 0
 8e2:	53 95       	inc	r21
 8e4:	c9 f7       	brne	.-14     	; 0x8d8 <__addsf3x+0x52>
 8e6:	7e f4       	brtc	.+30     	; 0x906 <__addsf3x+0x80>
 8e8:	1f 16       	cp	r1, r31
 8ea:	ba 0b       	sbc	r27, r26
 8ec:	62 0b       	sbc	r22, r18
 8ee:	73 0b       	sbc	r23, r19
 8f0:	84 0b       	sbc	r24, r20
 8f2:	ba f0       	brmi	.+46     	; 0x922 <__addsf3x+0x9c>
 8f4:	91 50       	subi	r25, 0x01	; 1
 8f6:	a1 f0       	breq	.+40     	; 0x920 <__addsf3x+0x9a>
 8f8:	ff 0f       	add	r31, r31
 8fa:	bb 1f       	adc	r27, r27
 8fc:	66 1f       	adc	r22, r22
 8fe:	77 1f       	adc	r23, r23
 900:	88 1f       	adc	r24, r24
 902:	c2 f7       	brpl	.-16     	; 0x8f4 <__addsf3x+0x6e>
 904:	0e c0       	rjmp	.+28     	; 0x922 <__addsf3x+0x9c>
 906:	ba 0f       	add	r27, r26
 908:	62 1f       	adc	r22, r18
 90a:	73 1f       	adc	r23, r19
 90c:	84 1f       	adc	r24, r20
 90e:	48 f4       	brcc	.+18     	; 0x922 <__addsf3x+0x9c>
 910:	87 95       	ror	r24
 912:	77 95       	ror	r23
 914:	67 95       	ror	r22
 916:	b7 95       	ror	r27
 918:	f7 95       	ror	r31
 91a:	9e 3f       	cpi	r25, 0xFE	; 254
 91c:	08 f0       	brcs	.+2      	; 0x920 <__addsf3x+0x9a>
 91e:	b0 cf       	rjmp	.-160    	; 0x880 <__stack+0x21>
 920:	93 95       	inc	r25
 922:	88 0f       	add	r24, r24
 924:	08 f0       	brcs	.+2      	; 0x928 <__addsf3x+0xa2>
 926:	99 27       	eor	r25, r25
 928:	ee 0f       	add	r30, r30
 92a:	97 95       	ror	r25
 92c:	87 95       	ror	r24
 92e:	08 95       	ret

00000930 <ceil>:
 930:	0e 94 29 06 	call	0xc52	; 0xc52 <__fp_trunc>
 934:	90 f0       	brcs	.+36     	; 0x95a <ceil+0x2a>
 936:	9f 37       	cpi	r25, 0x7F	; 127
 938:	48 f4       	brcc	.+18     	; 0x94c <ceil+0x1c>
 93a:	91 11       	cpse	r25, r1
 93c:	16 f4       	brtc	.+4      	; 0x942 <ceil+0x12>
 93e:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__fp_szero>
 942:	60 e0       	ldi	r22, 0x00	; 0
 944:	70 e0       	ldi	r23, 0x00	; 0
 946:	80 e8       	ldi	r24, 0x80	; 128
 948:	9f e3       	ldi	r25, 0x3F	; 63
 94a:	08 95       	ret
 94c:	26 f0       	brts	.+8      	; 0x956 <ceil+0x26>
 94e:	1b 16       	cp	r1, r27
 950:	61 1d       	adc	r22, r1
 952:	71 1d       	adc	r23, r1
 954:	81 1d       	adc	r24, r1
 956:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_mintl>
 95a:	0c 94 d7 05 	jmp	0xbae	; 0xbae <__fp_mpack>

0000095e <__cmpsf2>:
 95e:	0e 94 92 05 	call	0xb24	; 0xb24 <__fp_cmp>
 962:	08 f4       	brcc	.+2      	; 0x966 <__cmpsf2+0x8>
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	08 95       	ret

00000968 <__divsf3>:
 968:	0e 94 c8 04 	call	0x990	; 0x990 <__divsf3x>
 96c:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_round>
 970:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_pscB>
 974:	58 f0       	brcs	.+22     	; 0x98c <__divsf3+0x24>
 976:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__fp_pscA>
 97a:	40 f0       	brcs	.+16     	; 0x98c <__divsf3+0x24>
 97c:	29 f4       	brne	.+10     	; 0x988 <__divsf3+0x20>
 97e:	5f 3f       	cpi	r21, 0xFF	; 255
 980:	29 f0       	breq	.+10     	; 0x98c <__divsf3+0x24>
 982:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_inf>
 986:	51 11       	cpse	r21, r1
 988:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__fp_szero>
 98c:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__fp_nan>

00000990 <__divsf3x>:
 990:	0e 94 07 06 	call	0xc0e	; 0xc0e <__fp_split3>
 994:	68 f3       	brcs	.-38     	; 0x970 <__divsf3+0x8>

00000996 <__divsf3_pse>:
 996:	99 23       	and	r25, r25
 998:	b1 f3       	breq	.-20     	; 0x986 <__divsf3+0x1e>
 99a:	55 23       	and	r21, r21
 99c:	91 f3       	breq	.-28     	; 0x982 <__divsf3+0x1a>
 99e:	95 1b       	sub	r25, r21
 9a0:	55 0b       	sbc	r21, r21
 9a2:	bb 27       	eor	r27, r27
 9a4:	aa 27       	eor	r26, r26
 9a6:	62 17       	cp	r22, r18
 9a8:	73 07       	cpc	r23, r19
 9aa:	84 07       	cpc	r24, r20
 9ac:	38 f0       	brcs	.+14     	; 0x9bc <__divsf3_pse+0x26>
 9ae:	9f 5f       	subi	r25, 0xFF	; 255
 9b0:	5f 4f       	sbci	r21, 0xFF	; 255
 9b2:	22 0f       	add	r18, r18
 9b4:	33 1f       	adc	r19, r19
 9b6:	44 1f       	adc	r20, r20
 9b8:	aa 1f       	adc	r26, r26
 9ba:	a9 f3       	breq	.-22     	; 0x9a6 <__divsf3_pse+0x10>
 9bc:	35 d0       	rcall	.+106    	; 0xa28 <__divsf3_pse+0x92>
 9be:	0e 2e       	mov	r0, r30
 9c0:	3a f0       	brmi	.+14     	; 0x9d0 <__divsf3_pse+0x3a>
 9c2:	e0 e8       	ldi	r30, 0x80	; 128
 9c4:	32 d0       	rcall	.+100    	; 0xa2a <__divsf3_pse+0x94>
 9c6:	91 50       	subi	r25, 0x01	; 1
 9c8:	50 40       	sbci	r21, 0x00	; 0
 9ca:	e6 95       	lsr	r30
 9cc:	00 1c       	adc	r0, r0
 9ce:	ca f7       	brpl	.-14     	; 0x9c2 <__divsf3_pse+0x2c>
 9d0:	2b d0       	rcall	.+86     	; 0xa28 <__divsf3_pse+0x92>
 9d2:	fe 2f       	mov	r31, r30
 9d4:	29 d0       	rcall	.+82     	; 0xa28 <__divsf3_pse+0x92>
 9d6:	66 0f       	add	r22, r22
 9d8:	77 1f       	adc	r23, r23
 9da:	88 1f       	adc	r24, r24
 9dc:	bb 1f       	adc	r27, r27
 9de:	26 17       	cp	r18, r22
 9e0:	37 07       	cpc	r19, r23
 9e2:	48 07       	cpc	r20, r24
 9e4:	ab 07       	cpc	r26, r27
 9e6:	b0 e8       	ldi	r27, 0x80	; 128
 9e8:	09 f0       	breq	.+2      	; 0x9ec <__divsf3_pse+0x56>
 9ea:	bb 0b       	sbc	r27, r27
 9ec:	80 2d       	mov	r24, r0
 9ee:	bf 01       	movw	r22, r30
 9f0:	ff 27       	eor	r31, r31
 9f2:	93 58       	subi	r25, 0x83	; 131
 9f4:	5f 4f       	sbci	r21, 0xFF	; 255
 9f6:	3a f0       	brmi	.+14     	; 0xa06 <__divsf3_pse+0x70>
 9f8:	9e 3f       	cpi	r25, 0xFE	; 254
 9fa:	51 05       	cpc	r21, r1
 9fc:	78 f0       	brcs	.+30     	; 0xa1c <__divsf3_pse+0x86>
 9fe:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_inf>
 a02:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__fp_szero>
 a06:	5f 3f       	cpi	r21, 0xFF	; 255
 a08:	e4 f3       	brlt	.-8      	; 0xa02 <__divsf3_pse+0x6c>
 a0a:	98 3e       	cpi	r25, 0xE8	; 232
 a0c:	d4 f3       	brlt	.-12     	; 0xa02 <__divsf3_pse+0x6c>
 a0e:	86 95       	lsr	r24
 a10:	77 95       	ror	r23
 a12:	67 95       	ror	r22
 a14:	b7 95       	ror	r27
 a16:	f7 95       	ror	r31
 a18:	9f 5f       	subi	r25, 0xFF	; 255
 a1a:	c9 f7       	brne	.-14     	; 0xa0e <__divsf3_pse+0x78>
 a1c:	88 0f       	add	r24, r24
 a1e:	91 1d       	adc	r25, r1
 a20:	96 95       	lsr	r25
 a22:	87 95       	ror	r24
 a24:	97 f9       	bld	r25, 7
 a26:	08 95       	ret
 a28:	e1 e0       	ldi	r30, 0x01	; 1
 a2a:	66 0f       	add	r22, r22
 a2c:	77 1f       	adc	r23, r23
 a2e:	88 1f       	adc	r24, r24
 a30:	bb 1f       	adc	r27, r27
 a32:	62 17       	cp	r22, r18
 a34:	73 07       	cpc	r23, r19
 a36:	84 07       	cpc	r24, r20
 a38:	ba 07       	cpc	r27, r26
 a3a:	20 f0       	brcs	.+8      	; 0xa44 <__divsf3_pse+0xae>
 a3c:	62 1b       	sub	r22, r18
 a3e:	73 0b       	sbc	r23, r19
 a40:	84 0b       	sbc	r24, r20
 a42:	ba 0b       	sbc	r27, r26
 a44:	ee 1f       	adc	r30, r30
 a46:	88 f7       	brcc	.-30     	; 0xa2a <__divsf3_pse+0x94>
 a48:	e0 95       	com	r30
 a4a:	08 95       	ret

00000a4c <__fixunssfsi>:
 a4c:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__fp_splitA>
 a50:	88 f0       	brcs	.+34     	; 0xa74 <__fixunssfsi+0x28>
 a52:	9f 57       	subi	r25, 0x7F	; 127
 a54:	98 f0       	brcs	.+38     	; 0xa7c <__fixunssfsi+0x30>
 a56:	b9 2f       	mov	r27, r25
 a58:	99 27       	eor	r25, r25
 a5a:	b7 51       	subi	r27, 0x17	; 23
 a5c:	b0 f0       	brcs	.+44     	; 0xa8a <__fixunssfsi+0x3e>
 a5e:	e1 f0       	breq	.+56     	; 0xa98 <__fixunssfsi+0x4c>
 a60:	66 0f       	add	r22, r22
 a62:	77 1f       	adc	r23, r23
 a64:	88 1f       	adc	r24, r24
 a66:	99 1f       	adc	r25, r25
 a68:	1a f0       	brmi	.+6      	; 0xa70 <__fixunssfsi+0x24>
 a6a:	ba 95       	dec	r27
 a6c:	c9 f7       	brne	.-14     	; 0xa60 <__fixunssfsi+0x14>
 a6e:	14 c0       	rjmp	.+40     	; 0xa98 <__fixunssfsi+0x4c>
 a70:	b1 30       	cpi	r27, 0x01	; 1
 a72:	91 f0       	breq	.+36     	; 0xa98 <__fixunssfsi+0x4c>
 a74:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_zero>
 a78:	b1 e0       	ldi	r27, 0x01	; 1
 a7a:	08 95       	ret
 a7c:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_zero>
 a80:	67 2f       	mov	r22, r23
 a82:	78 2f       	mov	r23, r24
 a84:	88 27       	eor	r24, r24
 a86:	b8 5f       	subi	r27, 0xF8	; 248
 a88:	39 f0       	breq	.+14     	; 0xa98 <__fixunssfsi+0x4c>
 a8a:	b9 3f       	cpi	r27, 0xF9	; 249
 a8c:	cc f3       	brlt	.-14     	; 0xa80 <__fixunssfsi+0x34>
 a8e:	86 95       	lsr	r24
 a90:	77 95       	ror	r23
 a92:	67 95       	ror	r22
 a94:	b3 95       	inc	r27
 a96:	d9 f7       	brne	.-10     	; 0xa8e <__fixunssfsi+0x42>
 a98:	3e f4       	brtc	.+14     	; 0xaa8 <__fixunssfsi+0x5c>
 a9a:	90 95       	com	r25
 a9c:	80 95       	com	r24
 a9e:	70 95       	com	r23
 aa0:	61 95       	neg	r22
 aa2:	7f 4f       	sbci	r23, 0xFF	; 255
 aa4:	8f 4f       	sbci	r24, 0xFF	; 255
 aa6:	9f 4f       	sbci	r25, 0xFF	; 255
 aa8:	08 95       	ret

00000aaa <__floatunsisf>:
 aaa:	e8 94       	clt
 aac:	09 c0       	rjmp	.+18     	; 0xac0 <__floatsisf+0x12>

00000aae <__floatsisf>:
 aae:	97 fb       	bst	r25, 7
 ab0:	3e f4       	brtc	.+14     	; 0xac0 <__floatsisf+0x12>
 ab2:	90 95       	com	r25
 ab4:	80 95       	com	r24
 ab6:	70 95       	com	r23
 ab8:	61 95       	neg	r22
 aba:	7f 4f       	sbci	r23, 0xFF	; 255
 abc:	8f 4f       	sbci	r24, 0xFF	; 255
 abe:	9f 4f       	sbci	r25, 0xFF	; 255
 ac0:	99 23       	and	r25, r25
 ac2:	a9 f0       	breq	.+42     	; 0xaee <__floatsisf+0x40>
 ac4:	f9 2f       	mov	r31, r25
 ac6:	96 e9       	ldi	r25, 0x96	; 150
 ac8:	bb 27       	eor	r27, r27
 aca:	93 95       	inc	r25
 acc:	f6 95       	lsr	r31
 ace:	87 95       	ror	r24
 ad0:	77 95       	ror	r23
 ad2:	67 95       	ror	r22
 ad4:	b7 95       	ror	r27
 ad6:	f1 11       	cpse	r31, r1
 ad8:	f8 cf       	rjmp	.-16     	; 0xaca <__floatsisf+0x1c>
 ada:	fa f4       	brpl	.+62     	; 0xb1a <__floatsisf+0x6c>
 adc:	bb 0f       	add	r27, r27
 ade:	11 f4       	brne	.+4      	; 0xae4 <__floatsisf+0x36>
 ae0:	60 ff       	sbrs	r22, 0
 ae2:	1b c0       	rjmp	.+54     	; 0xb1a <__floatsisf+0x6c>
 ae4:	6f 5f       	subi	r22, 0xFF	; 255
 ae6:	7f 4f       	sbci	r23, 0xFF	; 255
 ae8:	8f 4f       	sbci	r24, 0xFF	; 255
 aea:	9f 4f       	sbci	r25, 0xFF	; 255
 aec:	16 c0       	rjmp	.+44     	; 0xb1a <__floatsisf+0x6c>
 aee:	88 23       	and	r24, r24
 af0:	11 f0       	breq	.+4      	; 0xaf6 <__floatsisf+0x48>
 af2:	96 e9       	ldi	r25, 0x96	; 150
 af4:	11 c0       	rjmp	.+34     	; 0xb18 <__floatsisf+0x6a>
 af6:	77 23       	and	r23, r23
 af8:	21 f0       	breq	.+8      	; 0xb02 <__floatsisf+0x54>
 afa:	9e e8       	ldi	r25, 0x8E	; 142
 afc:	87 2f       	mov	r24, r23
 afe:	76 2f       	mov	r23, r22
 b00:	05 c0       	rjmp	.+10     	; 0xb0c <__floatsisf+0x5e>
 b02:	66 23       	and	r22, r22
 b04:	71 f0       	breq	.+28     	; 0xb22 <__floatsisf+0x74>
 b06:	96 e8       	ldi	r25, 0x86	; 134
 b08:	86 2f       	mov	r24, r22
 b0a:	70 e0       	ldi	r23, 0x00	; 0
 b0c:	60 e0       	ldi	r22, 0x00	; 0
 b0e:	2a f0       	brmi	.+10     	; 0xb1a <__floatsisf+0x6c>
 b10:	9a 95       	dec	r25
 b12:	66 0f       	add	r22, r22
 b14:	77 1f       	adc	r23, r23
 b16:	88 1f       	adc	r24, r24
 b18:	da f7       	brpl	.-10     	; 0xb10 <__floatsisf+0x62>
 b1a:	88 0f       	add	r24, r24
 b1c:	96 95       	lsr	r25
 b1e:	87 95       	ror	r24
 b20:	97 f9       	bld	r25, 7
 b22:	08 95       	ret

00000b24 <__fp_cmp>:
 b24:	99 0f       	add	r25, r25
 b26:	00 08       	sbc	r0, r0
 b28:	55 0f       	add	r21, r21
 b2a:	aa 0b       	sbc	r26, r26
 b2c:	e0 e8       	ldi	r30, 0x80	; 128
 b2e:	fe ef       	ldi	r31, 0xFE	; 254
 b30:	16 16       	cp	r1, r22
 b32:	17 06       	cpc	r1, r23
 b34:	e8 07       	cpc	r30, r24
 b36:	f9 07       	cpc	r31, r25
 b38:	c0 f0       	brcs	.+48     	; 0xb6a <__fp_cmp+0x46>
 b3a:	12 16       	cp	r1, r18
 b3c:	13 06       	cpc	r1, r19
 b3e:	e4 07       	cpc	r30, r20
 b40:	f5 07       	cpc	r31, r21
 b42:	98 f0       	brcs	.+38     	; 0xb6a <__fp_cmp+0x46>
 b44:	62 1b       	sub	r22, r18
 b46:	73 0b       	sbc	r23, r19
 b48:	84 0b       	sbc	r24, r20
 b4a:	95 0b       	sbc	r25, r21
 b4c:	39 f4       	brne	.+14     	; 0xb5c <__fp_cmp+0x38>
 b4e:	0a 26       	eor	r0, r26
 b50:	61 f0       	breq	.+24     	; 0xb6a <__fp_cmp+0x46>
 b52:	23 2b       	or	r18, r19
 b54:	24 2b       	or	r18, r20
 b56:	25 2b       	or	r18, r21
 b58:	21 f4       	brne	.+8      	; 0xb62 <__fp_cmp+0x3e>
 b5a:	08 95       	ret
 b5c:	0a 26       	eor	r0, r26
 b5e:	09 f4       	brne	.+2      	; 0xb62 <__fp_cmp+0x3e>
 b60:	a1 40       	sbci	r26, 0x01	; 1
 b62:	a6 95       	lsr	r26
 b64:	8f ef       	ldi	r24, 0xFF	; 255
 b66:	81 1d       	adc	r24, r1
 b68:	81 1d       	adc	r24, r1
 b6a:	08 95       	ret

00000b6c <__fp_inf>:
 b6c:	97 f9       	bld	r25, 7
 b6e:	9f 67       	ori	r25, 0x7F	; 127
 b70:	80 e8       	ldi	r24, 0x80	; 128
 b72:	70 e0       	ldi	r23, 0x00	; 0
 b74:	60 e0       	ldi	r22, 0x00	; 0
 b76:	08 95       	ret

00000b78 <__fp_mintl>:
 b78:	88 23       	and	r24, r24
 b7a:	71 f4       	brne	.+28     	; 0xb98 <__fp_mintl+0x20>
 b7c:	77 23       	and	r23, r23
 b7e:	21 f0       	breq	.+8      	; 0xb88 <__fp_mintl+0x10>
 b80:	98 50       	subi	r25, 0x08	; 8
 b82:	87 2b       	or	r24, r23
 b84:	76 2f       	mov	r23, r22
 b86:	07 c0       	rjmp	.+14     	; 0xb96 <__fp_mintl+0x1e>
 b88:	66 23       	and	r22, r22
 b8a:	11 f4       	brne	.+4      	; 0xb90 <__fp_mintl+0x18>
 b8c:	99 27       	eor	r25, r25
 b8e:	0d c0       	rjmp	.+26     	; 0xbaa <__fp_mintl+0x32>
 b90:	90 51       	subi	r25, 0x10	; 16
 b92:	86 2b       	or	r24, r22
 b94:	70 e0       	ldi	r23, 0x00	; 0
 b96:	60 e0       	ldi	r22, 0x00	; 0
 b98:	2a f0       	brmi	.+10     	; 0xba4 <__fp_mintl+0x2c>
 b9a:	9a 95       	dec	r25
 b9c:	66 0f       	add	r22, r22
 b9e:	77 1f       	adc	r23, r23
 ba0:	88 1f       	adc	r24, r24
 ba2:	da f7       	brpl	.-10     	; 0xb9a <__fp_mintl+0x22>
 ba4:	88 0f       	add	r24, r24
 ba6:	96 95       	lsr	r25
 ba8:	87 95       	ror	r24
 baa:	97 f9       	bld	r25, 7
 bac:	08 95       	ret

00000bae <__fp_mpack>:
 bae:	9f 3f       	cpi	r25, 0xFF	; 255
 bb0:	31 f0       	breq	.+12     	; 0xbbe <__fp_mpack_finite+0xc>

00000bb2 <__fp_mpack_finite>:
 bb2:	91 50       	subi	r25, 0x01	; 1
 bb4:	20 f4       	brcc	.+8      	; 0xbbe <__fp_mpack_finite+0xc>
 bb6:	87 95       	ror	r24
 bb8:	77 95       	ror	r23
 bba:	67 95       	ror	r22
 bbc:	b7 95       	ror	r27
 bbe:	88 0f       	add	r24, r24
 bc0:	91 1d       	adc	r25, r1
 bc2:	96 95       	lsr	r25
 bc4:	87 95       	ror	r24
 bc6:	97 f9       	bld	r25, 7
 bc8:	08 95       	ret

00000bca <__fp_nan>:
 bca:	9f ef       	ldi	r25, 0xFF	; 255
 bcc:	80 ec       	ldi	r24, 0xC0	; 192
 bce:	08 95       	ret

00000bd0 <__fp_pscA>:
 bd0:	00 24       	eor	r0, r0
 bd2:	0a 94       	dec	r0
 bd4:	16 16       	cp	r1, r22
 bd6:	17 06       	cpc	r1, r23
 bd8:	18 06       	cpc	r1, r24
 bda:	09 06       	cpc	r0, r25
 bdc:	08 95       	ret

00000bde <__fp_pscB>:
 bde:	00 24       	eor	r0, r0
 be0:	0a 94       	dec	r0
 be2:	12 16       	cp	r1, r18
 be4:	13 06       	cpc	r1, r19
 be6:	14 06       	cpc	r1, r20
 be8:	05 06       	cpc	r0, r21
 bea:	08 95       	ret

00000bec <__fp_round>:
 bec:	09 2e       	mov	r0, r25
 bee:	03 94       	inc	r0
 bf0:	00 0c       	add	r0, r0
 bf2:	11 f4       	brne	.+4      	; 0xbf8 <__fp_round+0xc>
 bf4:	88 23       	and	r24, r24
 bf6:	52 f0       	brmi	.+20     	; 0xc0c <__fp_round+0x20>
 bf8:	bb 0f       	add	r27, r27
 bfa:	40 f4       	brcc	.+16     	; 0xc0c <__fp_round+0x20>
 bfc:	bf 2b       	or	r27, r31
 bfe:	11 f4       	brne	.+4      	; 0xc04 <__fp_round+0x18>
 c00:	60 ff       	sbrs	r22, 0
 c02:	04 c0       	rjmp	.+8      	; 0xc0c <__fp_round+0x20>
 c04:	6f 5f       	subi	r22, 0xFF	; 255
 c06:	7f 4f       	sbci	r23, 0xFF	; 255
 c08:	8f 4f       	sbci	r24, 0xFF	; 255
 c0a:	9f 4f       	sbci	r25, 0xFF	; 255
 c0c:	08 95       	ret

00000c0e <__fp_split3>:
 c0e:	57 fd       	sbrc	r21, 7
 c10:	90 58       	subi	r25, 0x80	; 128
 c12:	44 0f       	add	r20, r20
 c14:	55 1f       	adc	r21, r21
 c16:	59 f0       	breq	.+22     	; 0xc2e <__fp_splitA+0x10>
 c18:	5f 3f       	cpi	r21, 0xFF	; 255
 c1a:	71 f0       	breq	.+28     	; 0xc38 <__fp_splitA+0x1a>
 c1c:	47 95       	ror	r20

00000c1e <__fp_splitA>:
 c1e:	88 0f       	add	r24, r24
 c20:	97 fb       	bst	r25, 7
 c22:	99 1f       	adc	r25, r25
 c24:	61 f0       	breq	.+24     	; 0xc3e <__fp_splitA+0x20>
 c26:	9f 3f       	cpi	r25, 0xFF	; 255
 c28:	79 f0       	breq	.+30     	; 0xc48 <__fp_splitA+0x2a>
 c2a:	87 95       	ror	r24
 c2c:	08 95       	ret
 c2e:	12 16       	cp	r1, r18
 c30:	13 06       	cpc	r1, r19
 c32:	14 06       	cpc	r1, r20
 c34:	55 1f       	adc	r21, r21
 c36:	f2 cf       	rjmp	.-28     	; 0xc1c <__fp_split3+0xe>
 c38:	46 95       	lsr	r20
 c3a:	f1 df       	rcall	.-30     	; 0xc1e <__fp_splitA>
 c3c:	08 c0       	rjmp	.+16     	; 0xc4e <__fp_splitA+0x30>
 c3e:	16 16       	cp	r1, r22
 c40:	17 06       	cpc	r1, r23
 c42:	18 06       	cpc	r1, r24
 c44:	99 1f       	adc	r25, r25
 c46:	f1 cf       	rjmp	.-30     	; 0xc2a <__fp_splitA+0xc>
 c48:	86 95       	lsr	r24
 c4a:	71 05       	cpc	r23, r1
 c4c:	61 05       	cpc	r22, r1
 c4e:	08 94       	sec
 c50:	08 95       	ret

00000c52 <__fp_trunc>:
 c52:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__fp_splitA>
 c56:	a0 f0       	brcs	.+40     	; 0xc80 <__fp_trunc+0x2e>
 c58:	be e7       	ldi	r27, 0x7E	; 126
 c5a:	b9 17       	cp	r27, r25
 c5c:	88 f4       	brcc	.+34     	; 0xc80 <__fp_trunc+0x2e>
 c5e:	bb 27       	eor	r27, r27
 c60:	9f 38       	cpi	r25, 0x8F	; 143
 c62:	60 f4       	brcc	.+24     	; 0xc7c <__fp_trunc+0x2a>
 c64:	16 16       	cp	r1, r22
 c66:	b1 1d       	adc	r27, r1
 c68:	67 2f       	mov	r22, r23
 c6a:	78 2f       	mov	r23, r24
 c6c:	88 27       	eor	r24, r24
 c6e:	98 5f       	subi	r25, 0xF8	; 248
 c70:	f7 cf       	rjmp	.-18     	; 0xc60 <__fp_trunc+0xe>
 c72:	86 95       	lsr	r24
 c74:	77 95       	ror	r23
 c76:	67 95       	ror	r22
 c78:	b1 1d       	adc	r27, r1
 c7a:	93 95       	inc	r25
 c7c:	96 39       	cpi	r25, 0x96	; 150
 c7e:	c8 f3       	brcs	.-14     	; 0xc72 <__fp_trunc+0x20>
 c80:	08 95       	ret

00000c82 <__fp_zero>:
 c82:	e8 94       	clt

00000c84 <__fp_szero>:
 c84:	bb 27       	eor	r27, r27
 c86:	66 27       	eor	r22, r22
 c88:	77 27       	eor	r23, r23
 c8a:	cb 01       	movw	r24, r22
 c8c:	97 f9       	bld	r25, 7
 c8e:	08 95       	ret

00000c90 <_exit>:
 c90:	f8 94       	cli

00000c92 <__stop_program>:
 c92:	ff cf       	rjmp	.-2      	; 0xc92 <__stop_program>
